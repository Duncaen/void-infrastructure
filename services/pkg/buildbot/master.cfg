# -*- python -*-
# ex: set filetype=python:

import os

from twisted.cred import strcred
from buildbot.plugins import *

import configparser

ini = configparser.ConfigParser()
ini.read_dict({'buildbot': {}})
ini.read('/local/config.ini')

auth = util.UserPasswordAuth({"admin": "admin"})
authz = util.Authz(
    allowRules=[
        util.AnyEndpointMatcher(role="admins", defaultDeny=False),
        util.AnyControlEndpointMatcher(role="admins"),
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=["admins"], usernames=["admin"]),
    ]
)

c = BuildmasterConfig = {
    'buildbotNetUsageData': None,
    'protocols': {'pb': {'port': ini['buildbot'].getint('worker-port', 9989)}},
    'workers': [],
    'change_source': [],
    'schedulers': [],
    'builders': [],
    'services': [],
    'title': ini['buildbot'].get('title', 'Void Linux'),
    'titleURL': ini['buildbot'].get('title-url', 'https://voidlinux.org/'),
    'buildbotURL': ini['buildbot'].get('url', 'http://localhost:8010/'),
    'www': {
        'port': ini['buildbot'].get('www-port', 8010),
        'plugins': {'waterfall_view': {}, 'console_view': {}, 'grid_view': {}},
        'change_hook_dialects': {
            'github': {
                'secret': ini['buildbot'].get('github-secret'),
                'strict': True,
            },
        },
        'change_hook_auth': [strcred.makeChecker('file:changehook.passwd')],
        'authz': authz,
        'auth': auth,
    },
    'db': {
        'db_url': ini['buildbot'].get('db-url', 'sqlite:///state.sqlite'),
    },
}

if 'irc' in ini:
    c['services'].append(reporters.IRC(ini['irc']['host'], ini['irc']['nick'],
        password=ini['irc'].get('password', None),
        channels=[{'channel': ini['irc']['channel']}],
        authz={('force', 'stop'): ini['irc'].get('authz-users', '').split(' ')},
        notify_events=ini['irc'].get('notify-events', 'exception problem recovery worker').split(' '),
        noticeOnChannel=ini['irc'].getboolean('notice', True),
        useRevisions=ini['irc'].getboolean('use-revisions', True),
        useSSL=ini['irc'].getboolean('use-ssl', True),
        useColors=ini['irc'].getboolean('use-colors', False),
    ))

####### WORKERS

for s in filter(lambda s: s.startswith('worker:'), ini.sections()):
    name = ini[s].get('name', s.removeprefix('worker'))
    passwd = ini[s]['pass']
    max_builds = ini[s].getint('max-builds', 1)
    c['workers'].append(worker.Worker(name, passwd, max_builds=max_builds)),


####### CHANGESOURCES

# c['change_source'].append(changes.GitPoller(
#     'https://github.com/void-linux/void-packages.git',
#     workdir='gitpoller-workdir', branch='master',
#     pollInterval=30))

####### SCHEDULERS

builder_names = []
for s in filter(lambda s: s.startswith('builder:'), ini.sections()):
    name = ini[s].get('name', s.removeprefix('builder:'))
    builder_names.append(name)

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=builder_names))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=builder_names))


####### BUILDERS

factory = util.BuildFactory()

class XbpsSrcStep(steps.ShellCommand):
    def __init__(self, *args, **kwargs):
        command = [
            util.Interpolate('%(prop:distdir)s/xbps-src'),
            '-m', util.Property('masterdir'),
            '-H', util.Property('hostdir'),
        ] + args
        super().__init__(command=command, **kwargs)

factory.addStep(steps.Git(
    repourl='https://github.com/void-linux/xbps-bulk.git',
    mode='incremental',
    progress=True,
    alwaysUseLatest=True,
    haltOnFailure=True,
    description='Updating xbps-bulk from git',
    descriptionDone='xbps-bulk updated',
    ))
factory.addStep(steps.Git(
    repourl='https://github.com/void-linux/void-packages.git',
    mode='incremental',
    progress=True,
    alwaysUseLatest=True,
    haltOnFailure=True,
    description='Updating void-packages from git',
    descriptionDone='void-packages updated',
    ))
factory.addStep(XbpsSrcStep('zap',
    description='Zapping xbps-src masterdir',
    descriptionDone='xbps-src masterdir zap',
    ))
factory.addStep(XbpsSrcStep(
    'bootstrap-update',
    description='Updating xbps-src bootstrap pkgs',
    descriptionDone='xbps-src bootstrap-update done',
    ))
factory.addStep(XbpsSrcStep(
    'binary-bootstrap', util.Property('host_arch'),
    description='Updating xbps-src binary-bootstrap',
    descriptionDone='xbps-src binary-bootstrap done',
    ))

factory.addStep(steps.ShellCommand(
    command=['bash', '-c', util.Interpolate("""
for repo in / /debug /nonfree; do
    XBPS_ARCH=%(prop:target_arch)s xbps-rindex -r "%(prop:hostdir)s/binpkgs/${repo}"
done
""")],
    description='Removing obsolete packages',
    descriptionDone='Finished removing obsolete packages',
    ))

factory.addStep(steps.ShellCommand(
    command=['bash', '-c', util.Interpolate("""
for repo in /multilib /multilib/nonfree; do
    XBPS_ARCH=x86_64 xbps-rindex -r "%(prop:hostdir)s/binpkgs/$repo"
done
""")],
    description='Removing obsolete multilib packages',
    descriptionDone='Finished removing obsolete multilib packages',
    doStepIf=lambda s: s.getProperty('target_arch') == 'i686',
    hideStepIf=lambda results, s: results == SKIPPED,
    ))

for s in filter(lambda s: s.startswith('builder:'), ini.sections()):
    name = ini[s].get('name', s.removeprefix('builder:'))
    arch = ini[s].get('arch')
    target = ini[s].get('target', arch)
    cross = target != arch
    workernames = []
    if 'workernames' in ini[s]:
        workernames = ini[s]['workernames'].split(' ')
    c['builders'].append(
            util.BuilderConfig(name=name,
                workernames=workernames,
                factory=factory))

####### BUILDBOT SERVICES


####### PROJECT IDENTITY

